'Testing cx/func...' say

func: anon0()(_ Int) 42;
anon0 42 = check

func: untyped2(x y)(_ Int) $x $y +;
1 2 untyped2 3 = check

func: mixed3(op Func _ _ Int)(_ Int) $op call;
&- 49 7 mixed3 42 = check

func: named-result()(out Str) let: out 'foo';;
named-result 'foo' = check

func: literal-result()(_ Int 'foo') 42;
literal-result stash [42 'foo'] = check

func: fortytwo(_ Int)(#f) _;
func: fortytwo(42)(#t);
21 fortytwo !check
42 fortytwo check

(
  let: x 21;

  (
    let: x 42;
    func: closure()(_ Int) $x;
  )

  &closure call 42 = check
)

func: fimp1(x A)(_ Int) $x 35 +; 7 fimp1<A> 42 = check

func: ref3(x y Int z Arg0)(_ Int) $x $y $z + +; 1 3 5 ref3 9 = check

func: answer(0)(_ Int) 0;
func: answer(x Int)(_ Int) $x;
func: answer(42)(_ Sym) `correct;
0 answer 0 = check
1 answer 1 = check
42 answer `correct = check

func: my-sum(start Arg1:0 in Seq<Num>)(_ Arg1:0)
  $start $in &+ for;

0 10 my-sum 45 = check