/*
  A console ANSI graphics editor.
  Press Q to exit gracefully and restore terminal mode.

  https://github.com/basic-gongfu/cixl#getting-started
*/

include: 'ansi.cx';

use:
  (cx/abc #nil #t #f A Bool Char Int Sym)
  (cx/cond = < > >= ! if if-else or)
  (cx/const define:)
  (cx/error catch: dump)
  (cx/func func:)
  (cx/io #in #out print read-char)
  (cx/io/term
    #clear-screen #key-esc #key-back #reset-style #restore-pos #save-pos
    move-down move-left move-right move-to move-up normal-mode pick-bgcolor
    pick-fgcolor raw-mode say screen-size)
  (cx/iter for while)
  (cx/math ++ -- + - * / int)
  (cx/pair .)
  (cx/ref ref deref set set-call)
  (cx/stack % %% ~ _)
  (cx/str char int is-graph upper)
  (cx/table Table new put)
  (cx/var let:);

define: key-up      @i;
define: key-up-n    #key-up upper;
define: key-down    @k;
define: key-down-n  #key-down upper;
define: key-left    @j;
define: key-left-n  #key-left upper;
define: key-right   @l;
define: key-right-n #key-right upper;

define: key-quit   @Q;
define: key-resize @R;
define: key-x-home @h;
define: key-y-home @H;
define: key-x-end  @e;
define: key-y-end  @E;

let: (max-x max-y) 1 ref %%;
let: state `command ref;
let: (x y) 1 ref %%;
let: style #nil ref;
let: buffer Table new;

func: resize()()
  screen-size
  $max-y ~ set
  $max-x ~ set;

func: print-mode()()
  #out 1 1 move-to print
  #out $state deref `command = @C @E if-else print;
  
func: print-footer()()
  #out 1 $max-y deref move-to print
  #out @x print
  #out 7 $max-y deref move-to print
  #out @y print;
  
func: print-pos()()
  #out 3 $max-y deref move-to print
  #out '   ' print
  #out 3 move-left print
  #out $x deref print
  #out 9 $max-y deref move-to print
  #out '   ' print
  #out 3 move-left print
  #out $y deref print;

func: print-palette()()
  26 {
    let: i;
    let: c $i @a int + char;
    #out 1 $i 3 + move-to print
    #out $c print
  } for;

func: print-wheel()()
  #out 3 1 move-to print
  
  5 {
    let: r 63 *;
    5 {
      let: g 63 *;
      5 {
        let: b 63 *;
        #out $r $g $b pick-bgcolor print
        #out @@s print
      } for
    } for
  } for
  
  #out #reset-style print;

func: go-up(n Int)(_ Bool)
  $y  {
    let: v;
    let: dv $v $n >= $n {$v --} if-else;

    $dv {
      #out $n move-up print
      #t $v $dv -
    } {
      #f $v
    } if-else
  } set-call;

func: go-down(n Int)(_ Bool)
  $y  {
    let: v;
    let: dv $max-y deref 2 - $v - % $n > {_ $n} if;

    $dv {
      #out $n move-down print
      #t $v $dv +
    } {
      #f $v
    } if-else
  } set-call;

func: go-left(n Int)(_ Bool)
  $x  {
    let: v;
    let: dv $v $n > $n {$v --} if-else;

    $dv {
      #out $n move-left print
      #t $v $dv -
    } {
      #f $v
    } if-else
  } set-call;

func: go-right(n Int)(_ Bool)
  $x  {
    let: v;
    let: dv $max-x deref $v - % $n > {_ $n} if;

    $dv {
      #out $n move-right print
      #t $v $dv +
    } {
      #f $v
    } if-else
  } set-call;

func: handle-key(`command #key-esc)(_ Bool)
  $state `edit set
  #t;

func: handle-key(`command #key-quit)(_ Bool)
  #f;

func: handle-key(`command #key-resize)(_ Bool)
  resize #t;

func: handle-key(m Sym #key-back)(_ Bool)
  1 go-left {
    #out #reset-style print
    #out @@s print
    #out 1 move-left print
  } if
  
  #t;

func: handle-key(`command #key-up)(_ Bool)
  1 go-up _ #t;

func: handle-key(`command #key-up-n)(_ Bool)
  let: n $y deref 2 / int;
  $n { $n go-up _ } if
  #t;

func: handle-key(`command #key-down)(_ Bool)
  1 go-down _ #t;

func: handle-key(`command #key-down-n)(_ Bool)
  let: n $max-y deref 2 - $y deref - ++ 2 / int;
  $n { $n go-down _ } if
  #t;

func: handle-key(`command #key-left)(_ Bool)
  1 go-left _ #t;

func: handle-key(`command #key-left-n)(_ Bool)
  let: n $x deref 2 / int;
  $n { $n go-left _ } if
  #t;

func: handle-key(`command #key-right)(_ Bool)
  1 go-right _ #t;

func: handle-key(`command #key-right-n)(_ Bool)
  let: n $max-x deref $x deref - ++ 2 / int;
  $n { $n go-right _ } if
  #t;

func: set-pos(new-x new-y Int)()
  $x $new-x set
  $y $new-y set
  #out $new-x ++ $new-y ++ move-to print;

func: handle-key(`command #key-x-home)(_ Bool)
  1 $y deref set-pos
  #t;

func: handle-key(`command #key-y-home)(_ Bool)
  $x deref 1 set-pos
  #t;

func: handle-key(`command #key-x-end)(_ Bool)
  $max-x deref $y deref set-pos
  #t;

func: handle-key(`command #key-y-end)(_ Bool)
  $x deref $max-y deref 2 - set-pos
  #t;

func: handle-key(`command c Char)(_ Bool)
  #t;

func: handle-key(`edit #key-esc)(_ Bool)
  $state `command set
  #t;

func: get-offs(x y Int)(_ Int)
  $y -- $max-x deref * $x +;

func: handle-key(`edit c Char)(_ Bool)
  $c is-graph {$c @@s =} or {
    #out $c print
    $buffer $x deref $y deref get-offs $c $state deref . put
  
    $x {
      % $max-x deref < {
        ++
      } {
        $y {
          let: y ++;
          #out 1 $y ++ move-to print
	  $y
        } set-call
      
        _ 1
      } if-else
    } set-call
  } if #t;

resize
raw-mode
#out #clear-screen print
print-footer
print-palette
print-wheel
#out 2 2 move-to print

{
  #out #save-pos print
  print-mode
  print-pos
  #out #restore-pos print

  $state deref
  #in read-char
  handle-key
} while

#out #clear-screen print
normal-mode