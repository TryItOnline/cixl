/*
  A console ANSI graphics editor.
  Press Q to exit gracefully and restore terminal.

  https://github.com/basic-gongfu/cixl#getting-started
*/

include: 'ansi.cx';

use:
  (cx/abc #nil #t #f A Bool Char Int Sym)
  (cx/cond = < > >= <= ! and if if-else or)
  (cx/const define:)
  (cx/error catch: dump)
  (cx/func func:)
  (cx/io #in #out print read-char)
  (cx/io/term
    #clear-screen #key-esc #key-back #reset-style #restore-pos #save-pos
    move-down move-left move-right move-to move-up new-color normal-mode set-bg
    set-fg raw-mode say screen-size)
  (cx/iter for while)
  (cx/math ++ -- + - * / int)
  (cx/pair .)
  (cx/ref ref deref set set-call)
  (cx/stack % %% ~ _ splat)
  (cx/str char int is-graph upper)
  (cx/table Table delete get new put)
  (cx/var let:);

define: key-up      @i;
define: key-up-n    #key-up upper;
define: key-down    @k;
define: key-down-n  #key-down upper;
define: key-left    @j;
define: key-left-n  #key-left upper;
define: key-right   @l;
define: key-right-n #key-right upper;

define: key-quit   @Q;
define: key-resize @R;
define: key-x-home @h;
define: key-y-home #key-x-home upper;
define: key-x-end  @e;
define: key-y-end  #key-x-end upper;

define: key-set-bg    @b;
define: key-set-fg    @f;
define: key-get-color @c;
define: key-put-color #key-get-color upper;

let: (max-x max-y) 1 ref %%;
let: mode          `command ref;
let: (x y)         1 ref %%;
let: (bg fg)       [0 0 0] ref [255 255 255] ref;
let: bg-colors     Table new;
let: fg-colors     Table new;
let: buffer        Table new;
let: done          #f ref;

func: p(_ A)()
  #out ~ print;

func: set-pos(new-x new-y Int)()
  $x $new-x set
  $y $new-y set
  $new-x ++ $new-y ++ move-to p;

func: get-offs(x y Int)(_ Int)
  $y $max-x deref * $x +;

func: resize()()
  screen-size
  $max-y ~ set
  $max-x ~ set;

func: print-mode()()
  1 1 move-to p
  $mode deref `edit = @E @C if-else p;
  
func: print-footer()()
  1 $max-y deref move-to p
  @x p
  7 $max-y deref move-to p
  @y p;
  
func: print-pos()()
  3 $max-y deref move-to p
  '   ' p
  3 move-left p
  $x deref p
  9 $max-y deref move-to p
  '   ' p
  3 move-left p
  $y deref p;

func: print-palette()()
  26 {
    let: i;
    let: c $i @a int + char;
    1 $i 2 + move-to p
    $c p
  } for;

func: print-wheel()()
  2 1 move-to p
  let: o 1 0 get-offs ref;
  
  5 {
    let: r 63 *;
    5 {
      let: b 63 *;
      5 {
        let: g 63 *;
	let: c $r $g $b new-color;
        $c set-bg p
        @@s p
	
	$o {
	  let: po;
	  $bg-colors $po $c put
	  $fg-colors $po $c put
	  $po ++
	} set-call
      } for
    } for
  } for
  
  #reset-style p;

func: go-up(n Int)(_ Bool)
  $y  {
    let: v;
    let: dv $v $n >= $n {$v} if-else;

    $dv {
      $n move-up p
      #t $v $dv -
    } {
      #f $v
    } if-else
  } set-call;

func: go-down(n Int)(_ Bool)
  $y  {
    let: v;
    let: dv $max-y deref 2 - $v - % $n > {_ $n} if;

    $dv {
      $n move-down p
      #t $v $dv +
    } {
      #f $v
    } if-else
  } set-call;

func: go-left(n Int)(_ Bool)
  $x  {
    let: v;
    let: dv $v $n > $n {$v --} if-else;

    $dv {
      $n move-left p
      #t $v $dv -
    } {
      #f $v
    } if-else
  } set-call;

func: go-right(n Int)(_ Bool)
  $x  {
    let: v;
    let: dv $max-x deref $v - % $n > {_ $n} if;

    $dv {
      $n move-right p
      #t $v $dv +
    } {
      #f $v
    } if-else
  } set-call;

func: handle-key(`command #key-esc)()
  $mode `edit set;

func: handle-key(`command #key-quit)()
  $done #t set;

func: handle-key(`command #key-resize)()
  resize;

func: handle-key(m Sym #key-back)()
  1 go-left {
    #reset-style p
    @@s p
    1 move-left p
  } if;

func: handle-key(`command #key-up)()
  1 go-up _;

func: handle-key(`command #key-up-n)()
  let: n $y deref 2 / int;
  $n { $n go-up _ } if;

func: handle-key(`command #key-down)()
  1 go-down _;

func: handle-key(`command #key-down-n)()
  let: n $max-y deref 2 - $y deref - ++ 2 / int;
  $n { $n go-down _ } if;

func: handle-key(`command #key-left)()
  1 go-left _;

func: handle-key(`command #key-left-n)()
  let: n $x deref 2 / int;
  $n { $n go-left _ } if;

func: handle-key(`command #key-right)()
  1 go-right _;

func: handle-key(`command #key-right-n)()
  let: n $max-x deref $x deref - ++ 2 / int;
  $n { $n go-right _ } if;

func: handle-key(`command #key-x-home)()
  1 $y deref set-pos;

func: handle-key(`command #key-y-home)()
  $x deref 1 set-pos;

func: handle-key(`command #key-x-end)()
  $max-x deref $y deref set-pos;

func: handle-key(`command #key-y-end)()
  $x deref $max-y deref 2 - set-pos;

func: handle-key(`command #key-set-bg)()
  let: o $x deref $y deref get-offs;
  $bg $bg-colors $o get set;

func: handle-key(`command #key-set-fg)()
  let: o $x deref $y deref get-offs;
  $fg $fg-colors $o get set;

func: handle-key(`command #key-get-color)()
  $mode `get-color set;

func: handle-key(`get-color c Char)()
  $c @a >= {$c @z <=} and {
    let: (px py) 1 $c int @a int - 2 +;
    let: po $px $py get-offs;
    $fg $fg-colors $po get set
    $bg $bg-colors $po get set
  } if

  $mode `command set;
  
func: handle-key(`command #key-put-color)()
  $mode `put-color set;

func: handle-key(`put-color c Char)()
  $c @a >= {$c @z <=} and {
    let: (px py) 1 $c int @a int - 2 +;
    let: po $px $py get-offs;
    
    #save-pos p
    $px $py move-to p      
    #reset-style p

    $bg {
      $bg deref set-bg p
      $bg-colors $po $bg deref put
    } {
      $bg-colors $po delete
    } if-else

    $fg {
      $fg deref set-fg p
      $fg-colors $po $fg deref put
    } {
      $fg-colors $po delete
    } if-else
        
    $c p
    #reset-style p
    #restore-pos p
  } if

  $mode `command set;

func: handle-key(`command c Char)();

func: handle-key(`edit #key-esc)()
  $mode `command set;

func: handle-key(`edit c Char)()
  $c is-graph {$c @@s =} or {
    let: o $x deref $y deref get-offs;

    $bg {
      $bg deref set-bg p
      $bg-colors $o $bg deref put
    } {
      $bg-colors $o delete
    } if-else
    
    $fg {
      $fg deref set-fg p
      $fg-colors $o $fg deref put
    } {
      $fg-colors $o delete
    } if-else
    
    $c p
    #reset-style p
    $buffer $o $c put
    $x {% $max-x deref < &++ if} set-call
  } if;

resize
raw-mode
#clear-screen p
print-wheel
print-palette
print-footer
2 2 move-to p

{
  #save-pos p
  print-mode
  print-pos
  #restore-pos p

  $mode deref
  #in read-char
  handle-key

  $done deref !
} while

#clear-screen p
1 1 move-to p
normal-mode