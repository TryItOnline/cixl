/*
  A simple log-based database.

  See https://github.com/basic-gongfu/cixl/blob/master/examples/bookings.cx and
  https://github.com/basic-gongfu/cixl/blob/master/examples/collabri.cx for
  examples of usage.

  https://github.com/basic-gongfu/cixl#getting-started
*/

lib: qdb (

use: cx;

define: db-trans [];
type-id: DBKey(Cmp) Stack;

rec: DBTable<A>()
  file      RWFile
  key       Stack
  recs      Table<DBKey Arg0>
  buf       Buf
  on-load  
  on-commit Stack;

func: init-table(t DBTable<A> n Str k Stack)()
  let: f $n `a+ fopen % unblock;
  let: rs Table<DBKey Arg0:0> new;
  
  $t `file $f      put
  $t `key  $k      put
  $t `recs $rs     put
  $t `buf  Buf new put;

func: get-rec-key(t DBTable r A)(_ DBKey)
  $t `key get {$r ~ get} map stack;

func: load-rec(t DBTable in Pair)()
  let: (op arg) $in % x ~ y;
  
  $op `delete = {
    $t `recs get $arg delete
  } {
    let: r $arg $t `on-load get % {&call for} &_ if-else;
    let: k $t $r get-rec-key;    
    $t `recs get $k $r {_ $r} put-else
  } if-else;
          
func: load-recs(t DBTable in RFile)()
  $in read {$t ~ load-rec} for;

func: load-table(t DBTable)()
  let: f $t `file get;
  $f 0 seek
  $t $f load-recs;

func: on-load(t DBTable fn A)()
  $t `on-load get {
    let: s [];
    $t `on-load $s put
    $s
  } or $fn push;

func: on-commit(t DBTable fn A)()
  $t `on-commit get {
    let: s [];
    $t `on-commit $s put
    $s
  } or $fn push;

func: find-key(t DBTable k DBKey)(_ Opt)
  $t `recs get $k get;

func: len(t DBTable)(_ Int)
  $t `recs get len;

rec: DBChange()
  table  DBTable
  rec    A
  op     Sym;

func: push-change(t DBTable r A op Sym)()
  let: c DBChange new;
  $c `table $t  put
  $c `rec   $r  put
  $c `op    $op put
  #db-trans $c push;

func: upsert(t DBTable r A)()
  $t `recs get $t $r get-rec-key {
    $t $r `insert push-change
    $r
  } {
    _
    $t $r `update push-change
    $r
  } put-else;

func: poll-table(t DBTable poll Poll)()
  let: b $t `buf get;
  let: f $t `file get;
      
  $poll $f {
    $b flush
    $b $f write-bytes {$poll $f no-write} if
  } on-write;

func: commit-change(c DBChange poll Poll)()
  let: t $c `table get;
  let: b $t `buf get;
  let: op $c `op get;
  let: r $c `rec get;
  $b flush

  let: arg $op `delete = {
    $t $r get-rec-key
  } {
    let: pos $t `file get tell $b len +;
    $r $t `on-commit get % {{$pos ~ call} for} &_ if-else
  } if-else;

  $b {$t $poll poll-table} else
  $b $op $arg, write
  @@n $b print;

func: commit(poll Poll)()
  #db-trans {$poll commit-change} for
  #db-trans clear;

func: rollback-change(c DBChange)()
  let: op $c `op get;
  let: t $c `table get;
  let: r $c `rec get;
  let: k $t $r get-rec-key;
  let: recs $t `recs get;

  $op `insert = {
    $recs $k delete
  } {
    $recs $k $r put
  } if-else;

func: rollback()()
  #db-trans &rollback-change for
  #db-trans clear;

);