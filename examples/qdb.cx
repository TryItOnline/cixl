/*
  A simple log-based database.

  See https://github.com/basic-gongfu/cixl/blob/master/examples/bookings.cx for
  example of usage.

  https://github.com/basic-gongfu/cixl#getting-started
*/

/*
  Records are stored in tables indexed by record pointer and stored keys. Keys may be
  composite and are implemented as stacks of values.
*/

use: (cx/meta lib:);

lib: qdb (

use: cx;

rec: DBTable()
  file     RWFile
  key      Stack
  key-recs Table
  rec-keys Table;

func: new-db-table(n Str k Stack)(_ DBTable)
  let: t DBTable new;
  $t `file     $n `a+ fopen put
  $t `key      $k           put
  $t `rec-keys Table new    put
  $t `key-recs Table new    put
  $t;

func: get-rec-key(t DBTable r Rec)(_ Stack)
  $t `key get {$r ~ get} map stack;

/*
  The transaction contains the current set of changes.
*/

let: db-trans [];

/*
  Changes are pushed for each performed table operation, and contain the information
  needed to log itself to disk or revert the table.
*/

rec: DBChange()
  table DBTable
  key   Stack
  rec   Rec
  op    Sym;

func: push-change(t DBTable k Stack r Rec o Sym)()
  let: c DBChange new;
  $c `table $t put
  $c `key   $k put
  $c `rec   $r put
  $c `op    $o put
  $db-trans $c push;

/*
  Records are looked up via the record pointer, which must remain the same;
  and cloned to enable change management.
*/

func: upsert(t DBTable r Rec)()
  let: krs $t `key-recs get;
  let: rks $t `rec-keys get;  
  let: tk $rks $r get;
  let: k $t $r get-rec-key;
  let: tr $r %% ~ _;
  
  $tk {
    let: tr $krs $tk get;
    $t $k $tr `update push-change
    $krs $tk delete
    $rks $r delete
  } {
    $t $k $r `insert push-change
  } if-else
  
  $krs $k $tr put
  $rks $r $k put;

/*
  The current set of changes is flushed to disk on commit.
*/

func: commit()()
  let: dirty Table new;

  $db-trans {
    let: c;
    let: f $c `table get `file get;
    $f [$c `op get $c `key get $c `rec get] write
    $dirty $f #t put
  } for

  $dirty &x map &flush for
  $db-trans clear;

/*
  Or reverted on rollback.
*/

func: rollback()()
  $db-trans {
    let: c;
    let: t $c `table get;
    let: krs $t `key-recs get;
    let: rks $t `rec-keys get;

    $c `op get `insert = {
      $krs ($c `key get) delete
      $rks ($c `rec get) delete
    } {
      $krs $c `key get $c `rec get put
    } if-else
  } for

  $db-trans clear;
);