/*
  A simple log-based database.

  See https://github.com/basic-gongfu/cixl/blob/master/examples/bookings.cx for
  example of usage.

  https://github.com/basic-gongfu/cixl#getting-started
*/

/*
  Records are stored in tables indexed by record pointer and stored keys. Keys may be
  composite and are implemented as vectors of values.
*/

rec: DBTable()
  file     RWFile
  key      Vect
  key-recs Table
  rec-keys Table;

func: new-db-table(n Str k Vect) (DBTable)
  let: t DBTable new;
  $t put `file,     fopen $n `a+
  $t put `key       $k
  $t put `rec-keys, new Table
  $t put `key-recs, new Table
  $t;

func: get-rec-key(t DBTable r Rec) (Vect)
  $t get `key map {$r ~ get} vect;

/*
  The transaction contains the current set of changes.
*/

let: db-trans [];

/*
  Changes are pushed for each performed table operation, and contain the information
  needed to log itself to disk or revert the table.
*/

rec: DBChange()
  table DBTable
  key   Vect
  rec   Rec
  op    Sym;

func: push-change(t DBTable k Vect r Rec o Sym) ()
  let: c DBChange new;
  $c put `table $t
  $c put `key   $k
  $c put `rec   $r
  $c put `op    $o
  $db-trans push $c;

/*
  Records are looked up via the record pointer, which must remain the same;
  and cloned to enable change management.
*/

func: upsert(t DBTable r Rec) ()
  let: krs $t get `key-recs;
  let: rks $t get `rec-keys;  
  let: tk $rks get $r;
  let: k get-rec-key $t $r;
  let: tr $r %% ~ _;
  
  $tk if-else {
    let: tr $krs get $tk;
    push-change $t $k $tr `update
    delete $krs $tk
    delete $rks $r
  } {
    push-change $t $k $r `insert
  }
  
  $krs put $k $tr
  $rks put $r $k;

/*
  The current set of changes is flushed to disk on commit.
*/

func: commit() ()
  let: dirty new Table;

  $db-trans for {
    let: c;
    let: f $c get `table get `file;
    $f write [$c get `op, $c get `key, $c get `rec]
    $dirty put $f #t
  }

  $dirty map &x for &flush
  clear $db-trans;

/*
  Or reverted on rollback.
*/

func: rollback() ()
  $db-trans for {
    let: c;
    let: t $c get `table;
    let: krs $t get `key-recs;
    let: rks $t get `rec-keys;

    $c get `op = `insert if-else {
      $krs delete ($c get `key)
      $rks delete ($c get `rec)
    } {
      $krs put ($c get `key) ($c get `rec)
    }
  }

  clear $db-trans;