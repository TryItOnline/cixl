#!/usr/local/bin/cixl

/*
  The seed of a collab server.

  https://github.com/basic-gongfu/cixl#getting-started
*/

include: 'qdb.cx';

use:
  (cx/abc
    A Bool Char Int Opt Stack Str Sym
    #f #nil #t
    is-nil)
  (cx/cond ! = == and else if if-else or switch:)
  (cx/const define:)
  (cx/error catch: throw value)
  (cx/func func: recall)
  (cx/gfx new-rgb)
  (cx/io
    File RFile WFile
    #out
    close flush fopen lines print reverse tell unblock)
  (cx/io/buf Buf write-bytes)
  (cx/io/poll Poll delete no-write on-read on-write wait)
  (cx/io/term
    clear-screen clear-screen-end reset-style
    ask move-to set-fg say yelp)
  (cx/iter Iter for is-done iter next while)
  (cx/math ++)
  (cx/net
    TCPClient TCPServer
    accept listen)
  (cx/pair x y)
  (cx/rec ? rec: get put)
  (cx/ref deref ref set-call)
  (cx/str int join reverse split str words)
  (cx/sym sym)
  (cx/sys #args home-dir make-dir)
  (cx/stack _ % ~ get pop push)
  (cx/table Table put)
  (cx/time fmt now)
  (cx/type new)
  (cx/var let:)
  (qdb
    DBTable
    commit find-key init-table len load-table on-load on-commit rollback
    upsert);

let: port #args pop {'Missing port' throw} or int;

define: backlog 3;
define: tail-default 24;

define: error-color 255 0 0 new-rgb;

func: get-path(n Str)(_ Str)
  [home-dir '.collabri' $n] @/ join;

'' get-path make-dir

let: poll Poll new;

rec: User ()
  name     Sym
  password Str;

func: find-user(name Sym)(_ Opt<User>)
  $users [$name] find-key;

func: new-user (n Sym)(_ User)
  let: u User new;
  $u `name $n put
  $u;

rec: Topic ()
  id name
  parent-id Sym
  parent    Topic
  children
  clients   Table
  log-path  Str
  log-buf   Buf
  log       WFile;

let: root Topic new;
$root `name `root put
$root `id `/ put
$root `log-path 'topics' get-path put
$root `clients Table new put

func: open-log(t Topic m Sym)(l Opt<File>)
  let: p $t `log-path get;
  let: l [$p @/ $t `name get '.txt'] #nil join $m fopen;
  $l {$l unblock} if;

func: get-log(t Topic)(_ WFile)
  $t `log get {
    let: p $t `log-path get;
    $p make-dir

    let: l $t `a open-log;    
    $t `log $l put
    
    $l
  } or;

func: init-log-buf(t Topic)(b Buf)
  let: b Buf new;
  $t `log-buf $b put;

func: push-log(t Topic in Str)()
  let: b $t `log-buf get {$t init-log-buf} or;

  let: l $t get-log;
  $b flush
  
  $b {    
    $poll $l {
      $b flush
      $b $l write-bytes {$poll $l no-write} if
    } on-write
  } else
  
  $b $in print;

func: add-topic(pt t Topic)()
  let: pc $pt `children get;

  $pc {
    $pc $t `name get $t put
  } {
    let: pc Table new;
    $pt `children $pc put
    $pc $t `name get $t put    
  } if-else;

func: find-topic(id Sym)(_ Opt<Topic>)
  $topics [$id] find-key;

func: load-topic(in Topic)(_ Topic)
  $in `clients Table new put
  let: pid $in `parent-id get;
  
  $pid {
    let: pt $pid `/ = $root {$pid find-topic} if-else;
    $pt {['Topic not found: ' $pid] throw} else
    $in `parent $pt put
    $pt $in add-topic
  } if

  $in;
  
func: commit-topic(in Topic pos Int)(out Topic)
  let: out Topic new;
  $out `id        $in `id       get         put
  $out `name      $in `name     get         put
  $out `parent-id $in `parent   get `id get put
  $out `log-path  $in `log-path get         put;

rec: Option ()
  id    Sym
  value A;

func: get-option(id Sym)(_ Opt)
  let: rec $options [$id] find-key;
  $rec {$rec `value get} and;

func: set-option(id Sym value A)()
  let: o Option new;
  $o `id    $id    put
  $o `value $value put
  $options $o upsert;

rec: Client ()
  state   Sym
  user    User
  topic   Topic
  io      TCPClient
  buf     Buf;

func: join-topic(c Client ns Str)()
  $c `topic get `clients get $c delete
  $ns 0 get @/ = {$c `topic $root put} if
  
  $ns @/ split {
    let: n;
    let: t $c `topic get;

    $n '..' = {
      let: pt $t `parent get;
      $pt {'Topic not found: ..' throw} else
      $c `topic $pt put
    } {
      let: tc $t `children get;
      $tc {['Topic not found: ' $n] throw} else
    
      let: ct $tc $n sym get;
      $ct {['Topic not found: ' $n] throw} else

      $c `topic $ct put
    } if-else
  } for

  $c `topic get `clients get $c #t put;

func: join-topic(c Client t Topic)()
  let: ct $c `topic get;
  $ct {$ct `clients get $c delete} if
  $c `topic $t put
  $c `topic get `clients get $c #t put;

func: new-topic(c Client n Sym)()
  let: t Topic new;  
  $t `name $n put
  $t `clients Table new put
  
  let: pt $c `topic get;
  $t `parent $pt put
  $pt $t add-topic

  $t `id [$pt `id get $n @/] #nil join sym put
  $t `log-path [$pt `log-path get $pt `name get] @/ join put
  $topics $t upsert

  $c $t join-topic;

func: push-out(c Client v A)()
  $c `buf get $v print;

func: poll-out(c Client)()
  let: buf $c `buf get;
  let: io $c `io get;

  $poll $io {
    $buf flush
    $buf $io write-bytes {$poll $io no-write} if
  } on-write;

func: prompt(c Client `auth-user)('User: ');

func: prompt(c Client `auth-password)('Password: ');

func: prompt(c Client `ok)(_ Str)
  [$c `topic get `id get @@s] #nil join;

func: push-prompt(c Client)()
  $c % % `state get prompt push-out;

func: topic-tail(c Client n Int)()
  let: t $c `topic get;
  let: in $t `r open-log;

  $in {
    let: it $in reverse lines;
    let: li 0 ref;
  
    $poll $in {
      let: l $it next;
    
      $l {
        $c [$l % reverse @@n] push-out
        $li &++ set-call
      } if
    
      $li deref $n = $it is-done or {
        $poll $in delete
        $in close
	$c @@n push-out
        $c push-prompt
	$c poll-out
      } if
    } on-read
  } {
    $c push-prompt
  } if-else;

func: list-topics(c Client t Topic push-id Bool)()
  let: cts $t `children get;

  $cts {
    $cts {
      let: ct y;
      $c $ct #t recall
    } for
  } {
    $push-id {$c [$t `id get @@n] push-out} if
  } if-else;

func: disconnect(c Client)()
  let: io $c `io get;
  $poll $io delete
  $io close
  $c `topic get `clients get $c delete;

func: push-post(u User t Topic in Str)()
  $t $in push-log
  
  $t `clients get {
    let: c x;
    $c `state get `ok = {$c `user get $u ==!} and {$c $in push-out} if
  } for

  let: pt $t `parent get;
  $pt {$u $pt $in recall} if;

func: new-post(c Client in Str)()
  let: u $c `user get;
  let: t $c `topic get;
  
  $u $t [
    now '%d %H:%M ' fmt
    @@ $u `name get @@s
    $t `id get @@s
    $in @@n
  ] #nil join push-post;

func: handle-cmd(c Client `branch in Iter<Char>)()
  let: n $in str;
  $n {'Missing topic name' throw} else
  $c $n sym new-topic
  $c push-prompt;

func: handle-cmd(c Client `join in Iter<Char>)()
  $c $in str $root or join-topic
  $c push-prompt;

func: handle-cmd(c Client `list in Iter<Char>)()
  $c % `topic get #f list-topics
  $c @@n push-out
  $c push-prompt;

func: handle-cmd(c Client `tail in Iter<Char>)()
  $c $in str int #tail-default or topic-tail;
      
func: handle-in(c Client `auth-user in Str)()
  $in {
    let: name $in sym;
    let: u $name find-user;
    $c `user $u {$name new-user} or put
    $c `state `auth-password put
    $c push-prompt
  } {
    $c disconnect
  } if-else;

func: handle-in(c Client `auth-password in Str)()
  let: u $c `user get;
  let: p $u `password get;
  let: out $c `buf get;
  
  $out clear-screen
  1 1 $out move-to
  
  $p is-nil {
    $u `password $in put
    $users $u upsert
  } {
    $p $in = {
      $c `user #nil put
      $c `state `auth-user put
      'Authentication failed' throw
    } else
  } if-else

  $root `clients get $c #t put  
  $c `state `ok put
  $c @@n push-out
  $c push-prompt;

func: handle-in(c Client `ok in Str)()
  $in {
    let: it $in iter;

    $it next @: = {
      let: cmd $it words next sym;
      $c $cmd $it handle-cmd
    } {
      $c $in new-post
      $c push-prompt
    } if-else
  } {
    $c push-prompt
  } if-else;

func: push-error(c Client e Str)()
  let: b $c `buf get;
  #error-color $b set-fg
  $c ['Error: ' $e @@n @@n] push-out
  $b reset-style;

func: push-error(c Client e Stack)()
  $c $e #nil join push-error;

func: new-client(io TCPClient)(_ Client)
  let: c Client new;
  let: out Buf new;
  
  $c `state   `auth-user put
  $c `io      $io        put
  $c `buf     $out       put
  
  $c $root join-topic
  let: ils $io lines;
  
  $poll $io {
    let: in $ils next;

    $in is-nil {
      $ils is-done {$c disconnect} if
    } {	
	$c % `state get $in handle-in
	$c poll-out
	$poll commit

        catch: A
	  let: e;
          $c $e value push-error
	  $c % push-prompt poll-out
	  $e yelp
	  rollback;
    } if-else
  } on-read

  $out clear-screen
  1 1 $out move-to
  
  $c [`intro get-option @@n @@n] push-out
  $c poll-out
  $c;

#out clear-screen
1 1 #out move-to

['Collabri v0.3' @@n] say

let: users DBTable<User> new;
$users 'users.db' get-path [`name] init-table
$users load-table

let: topics DBTable<Topic> new;
$topics 'topics.db' get-path [`id] init-table
$topics &load-topic on-load
$topics &commit-topic on-commit
$topics load-table

let: options DBTable<Option> new;
$options 'options.db' get-path [`id] init-table
$options load-table

$users len {
  ['Server Setup' @@n] say

  `intro 'Intro: ' ask set-option
  let: u '@nUser: ' ask sym new-user;
  #out 'Password: ' print
  $u `password '' ask put
  $users $u upsert
  $poll commit
  
  1 3 #out move-to
  #out clear-screen-end
} else

let: server #nil $port #backlog listen;

$poll $server {
  let: c $server accept;
  $c {$c new-client % push-prompt} if
} on-read

['Listening on port ' $port] say

{$poll -1 wait _ #t} while