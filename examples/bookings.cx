/*
  The humble beginnings of a booking system.

  Once Cixl is installed, tests may be run by executing
  "load '../examples/bookings.cx'" followed by "run-tests".

  https://github.com/basic-gongfu/cixl#getting-started
*/

|

include: 'qdb.cx';

let: resources  new-db-table 'resource.db' ([`id]);
let: bookings   new-db-table 'booking.db'  ([`id]);     

let: next-booking-id 1 ref;

/*
  Resources support tracking availability in time.
*/

rec: Resource()
  id       Sym
  quantity Int
  calendar Vect;

/*
  Capacities keep track of total and used quantity for a specific resource and
  interval. They are used as building blocks for calendars.
*/

rec: Capacity()
  start end  Time
  total used Int;

func: new-capacity(start end Time total used Int) (Capacity)
  let: c new Capacity;
  $c put `start $start
  $c put `end   $end
  $c put `total $total
  $c put `used  $used
  $c;

/*
  Resources start out with one continous segment of full capacity in the calendar.
*/

func: new-resource(id Sym q Int) (Resource)
  let: r new Resource;
  $r put `id       $id
  $r put `quantity $q
  $r put `calendar ([new-capacity #min-time #max-time $q 0])
  upsert $resources $r
  $r;

/*
  Capacities are split as needed during update.
*/

func: update-capacity(in Capacity start end Time total used Int out Vect) ()
  $in get `start < $start if {(
    let: head $in %% ~ _;
    $head put `end $start
    $in put `start $start
    $out push $head
  )}

  $out push $in

  $in get `end > $end if {(
    let: tail $in %% ~ _;
    $tail put `start $end
    $in put `end $end
    $out push $tail
  )}

  let: t get $in `total + $total;
  let: u get $in `used + $used;
  $u > $t if {fail 'Overbook'}
  $in put `total $t
  $in put `used  $u;

func: intersects(in Capacity start end Time) (Bool)
  {$in get `start < $end} and {($in get `end > $start)};

/*
  The entire calendar is scanned for each update, records are cloned to avoid
  inconsistent calendars on failure.
*/

func: update-calendar(in Vect start end Time total used Int) (Vect)
  let: out [];

  $in for {
    %, intersects $ $start $end, $ if {
      %%, update-capacity $ $start $end $total $used $out
    } _
  }
  
  $out;

func: update-resource(r Resource start end Time total used Int) ()
  let: c $r get `calendar;
  $r put `calendar (update-calendar $c $start $end $total $used);

/*
  Bookings represent used quantity for a specific resource and interval.
*/

rec: Booking()
  id        Int   
  resource  Resource
  start end Time
  quantity  Int;

func: next-booking-id() (Int)
  let: id get-ref $next-booking-id;
  $next-booking-id put-ref ($id ++)
  $id;

func: new-booking(r Resource start end Time q Int) (Booking)
  $start < $end else {fail 'Invalid booking length'}
  let: b new Booking;
  $b put `id       next-booking-id
  $b put `resource $r
  $b put `start    $start
  $b put `end      $end
  $b put `quantity $q
  update-resource $r $start $end 0 $q
  upsert $bookings $b
  $b;

/*
  This should fail with an overbook error since it tries to book 11 out of 10 for
  the next hour.
*/

func: run-tests() ()
  let: r new-resource new Sym 10;
  new-booking $r today (today 1 days +) 5 _
  new-booking $r now   (now 1h +)       6 _;