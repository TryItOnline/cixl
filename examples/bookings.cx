, is-let `min-time if {} {
  let: min-time [] time;
  let: max-time [9999 11 30] time;
}

rec: Resource()
  quantity Int
  calendar Vect;
  
rec: Capacity()
  start end  Time
  total used Int;

func: new-capacity(start end Time total used Int)
  let: c Capacity new;
  repeat: ($c put)
    `start    $start,
    `end      $end,
    `total    $total,
    `used     $used;
  $c;

func: new-resource(q Int)
  let: r Resource new;
  $r put `quantity $q
  $r put `calendar [new-capacity $min-time $max-time $q 0]
  $r;

func: update-capacity(in Capacity start end Time total used Int out Vect)
  $in get `start lt $start if {(
    let: head $in %%;
    $head put `end $start
    $in put `start $start
    $out push $head
  )} {}

  $out push $in

  $in get `end gt $end if {(
    let: tail $in %%;
    $tail put `start $end
    $in put `end $end
    $out push $tail
  )} {}

  let: t get $in `total + $total;
  let: u get $in `used + $used;
  if $u gt $t {fail 'Overbook'} { }
  $in put `total $t
  $in put `used $u;

func: update-calendar(in Vect start end Time total used Int)
  let: out [];
  $in for {update-capacity $start $end $total $used $out}
  $out;

func: update-resource(r Resource start end Time total used Int)
  let: c $r get `calendar;
  $r put `calendar,
  update-calendar $c $start $end $total $used;

rec: Booking()
  resource  Resource
  start end Time
  quantity  Int;

func: new-booking(r Resource start end Time q Int)
  $end lte $start if {fail 'Invalid booking length'} {}
  let: b Booking new;
  repeat: ($b put)
    `resource $r,
    `start    $start,
    `end      $end,
    `quantity $q;
  update-resource $r $start $end 0 $q
  $b;

func: run-tests()
  let: r new-resource 10;
  let: (start end) today, today +, 1 days;
  new-booking $r $start $end 5 _
  new-booking $r $start $end 6;