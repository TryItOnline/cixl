#!/usr/local/bin/cixl

/*
  The humble beginnings of a booking system.

  Tests may be run by executing "load 'cixl/examples/bookings.cx'" followed by
  "run-tests" from the REPL.

  https://github.com/basic-gongfu/cixl#getting-started
*/

use: cx;

include: 'qdb.cx';
use: (qdb DBTable init-table upsert);

(

let: next-booking-id 1 ref;

/*
  Capacities keep track of total and used quantity for a specific resource and
  interval. They are used as building blocks for calendars.
*/

rec: Capacity
  start end  Time
  total used Int;

/*
  Resources support tracking availability in time.
*/

rec: Resource
  id       Sym
  quantity Int
  calendar Stack<Capacity>;

func: new-capacity(start end Time total used Int)(c Capacity)
  let: c Capacity new;
  $c `start $start put
  $c `end   $end   put
  $c `total $total put
  $c `used  $used  put;

/*
  Resources start out with one continous segment of full capacity in the calendar.
*/

func: new-resource(id Sym q Int)(r Resource)
  let: r Resource new;
  let: c [#min-time #max-time $q 0 new-capacity];
  $r `id       $id put
  $r `quantity $q  put
  $r `calendar $c  put
  $resources $r upsert;

/*
  Capacities are split as needed during update.
*/

func: update-capacity(in Capacity start end Time total used Int out Stack<Capacity>)()
  $in `start get $start < {
    let: head $in %% ~ _;
    $head `end   $start put
    $in   `start $start put
    $out $head push
  } if

  $out $in push

  $in `end get $end > {
    let: tail $in %% ~ _;
    $tail `start $end put
    $in   `end   $end put
    $out $tail push
  } if

  let: t $in `total get $total +;
  let: u $in `used get $used +;
  $u $t > {'Overbook' throw} if
  $in `total $t put
  $in `used  $u put;

func: intersects(in Capacity start end Time)(_ Bool)
  {$in `start get $end <} {$in `end get $start >} and;

/*
  The entire calendar is scanned for each update, records are cloned to avoid
  inconsistent calendars on failure.
*/

func: update-calendar(in Stack<Capacity> start end Time total used Int)
                     (out Stack<Capacity>)
  let: out Stack<Capacity> new;

  $in {
    % $start $end intersects {
      %% $start $end $total $used $out update-capacity
    } if _
  } for;

func: update-resource(r Resource start end Time total used Int)()
  let: c $r `calendar get;
  $r `calendar ($c $start $end $total $used update-calendar) put;

/*
  Bookings represent used quantity for a specific resource and interval.
*/

rec: Booking
  id        Int   
  resource  Resource
  start end Time
  quantity  Int;

func: next-booking-id()(_ Int)
  $next-booking-id {++ %} set-call;

func: new-booking(r Resource start end Time q Int)(b Booking)
  $start $end < {'Invalid booking length' throw} else
  let: b Booking new;
  $b `id       next-booking-id put
  $b `resource $r              put
  $b `start    $start          put
  $b `end      $end            put
  $b `quantity $q              put
  $r $start $end 0 $q update-resource
  $bookings $b upsert;

let: resources  DBTable<Resource> new;
$resources 'resource.db' [`id] init-table

let: bookings DBTable<Booking> new;
$bookings 'booking.db'  [`id] init-table

/*
  This should fail with an overbook error since it tries to book 11 out of 10 for
  the next hour.
*/

func: run-tests()()
  let: r Sym new 10 new-resource;
  $r today (now 2h +) 5 new-booking _
  $r now   (now 1h +) 6 new-booking _;

)