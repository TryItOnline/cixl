/*
  This file contains the humble beginnings of a booking system written in Cixl
  for demonstration purposes. Once Cixl is installed, the tests may be run by
  executing "load '../examples/bookings.cx'" followed by "run-tests".

  https://github.com/basic-gongfu/cixl#getting-started
*/

/*
  Resources support tracking availability in time.
*/

rec: Resource()
  id       Guid
  quantity Int
  calendar Vect;

/*
  Capacities keep track of total and used quantity for a specific resource and
  interval. They are used as building blocks for calendars.
*/

rec: Capacity()
  start end  Time
  total used Int;

func: new-capacity(start end Time total used Int)
  let: c Capacity new;
  repeat: ($c put)
    `start    $start,
    `end      $end,
    `total    $total,
    `used     $used;
  $c;

/*
  Resources start out with one continous segment of full capacity in the calendar.
*/

func: new-resource(q Int)
  let: r Resource new;
  repeat: ($r put)
    `id       (Guid new),
    `quantity $q,
    `calendar [new-capacity #min-time #max-time $q 0];
  $r;

/*
  Capacities are split as needed during update.
*/

func: update-capacity(in Capacity start end Time total used Int out Vect)
  $in get `start < $start if {(
    let: head $in %%;
    $head put `end $start
    $in put `start $start
    $out push $head
  )}

  $out push $in

  $in get `end > $end if {(
    let: tail $in %%;
    $tail put `start $end
    $in put `end $end
    $out push $tail
  )}

  let: t get $in `total + $total;
  let: u get $in `used + $used;
  if $u > $t {fail 'Overbook'}
  repeat: ($in put) `total $t, `used  $u;;

func: intersects(in Capacity start end Time)
  {$in get `start < $end} and {($in get `end > $start)};

/*
  The entire calendar is scanned for each update, records are cloned to avoid
  inconsistent calendars on failure.
*/

func: update-calendar(in Vect start end Time total used Int)
  let: out [];

  $in for {
    %, intersects $ $start $end, $ if {
      %%, update-capacity $ $start $end $total $used $out
    } _
  }
  
  $out;

func: update-resource(r Resource start end Time total used Int)
  let: c $r get `calendar;
  $r put `calendar,
  update-calendar $c $start $end $total $used;

/*
  Bookings represent used quantity for a specific resource and interval.
*/

rec: Booking()
  id        Guid   
  resource  Resource
  start end Time
  quantity  Int;

func: new-booking(r Resource start end Time q Int)
  $start < $end else {fail 'Invalid booking length'}
  let: b Booking new;
  repeat: ($b put)
    `id       (Guid new),
    `resource $r,
    `start    $start,
    `end      $end,
    `quantity $q;
  update-resource $r $start $end 0 $q
  $b;

/*
  This should fail with an overbook error since it tries to book 11 out of 10 for
  the next hour.
*/

func: run-tests()
  let: r new-resource 10;
  repeat: (new-booking $r)
    (today today ,+ 1 days 5),
    (now   now ,+ 1h       6);;