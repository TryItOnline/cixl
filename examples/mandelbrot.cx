use: cx;

define: max 4.0;
define: max-iter 570;
define: black 0 0 0 255 new-color;

let: (max-x max-y) screen-size;
let: max-cx $max-x 3.0 / 2.0 *;
let: max-cy $max-y 2.0 /;
let: rows Stack<Str> new;
let: buf Buf new;
let: is-black Stack<Int> new;
let: zoom 0 ref;

func: render()()
  $is-black % clear $max-x 0 repeat
  $rows clear
  
  $max-y 2 / {
    let: y;
    $buf 0 seek

    $max-x {
      let: x;

      $is-black $x get 1 > {
        #black $buf set-bg
      } {
        let: (zx zy) 0.0 ref %%;
        let: cx $x $max-cx - $zoom deref /;
        let: cy $y $max-cy - $zoom deref /;
        let: i #max-iter ref;

        {
          let: nzx $zx deref ** $zy deref ** - $cx +;
	  $zy $zx deref *2 $zy deref * $cy + set
	  $zx $nzx set
          $i &-- set-call	
          $nzx ** $zy deref ** + #max < $i deref and
        } while

        let: c $i deref % -7 bsh bor 256 mod;
	
        $c {
          $x 256 mod $y 256 mod
        } {
          $is-black $x &++ put-call
          0 0
        } if-else $c 255 new-color $buf set-bg
      } if-else
      
      @@s $buf print
    } for

    $rows $buf str push   
  } for

  1 1 #out move-to
  $rows {#out print} for
  $rows riter {#out print} for;

#out hide-cursor
raw-mode

let: poll Poll new;
let: is-done #f ref;

$poll #in {
  #in read-char _
  $is-done #t set
} on-read

{
  $zoom &++ set-call
  render
  $poll 0 wait _
  $is-done deref !
} while

#out reset-style
#out clear-screen
1 1 #out move-to
#out show-cursor
normal-mode