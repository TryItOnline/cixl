/*
  Extends cx/io/term with support for ANSI graphics.

  https://github.com/basic-gongfu/cixl#getting-started
*/

lib: cx/io/term (

use:
  (cx/abc Char Int)
  (cx/const define:)
  (cx/func func:)
  (cx/iter for times)
  (cx/rec get new put rec:)
  (cx/stack Stack)
  (cx/var let:);

define: csi-esc '@027[';

define: clear-row-end [#csi-esc '0K'];
define: clear-row [#csi-esc '2K'];
define: clear-screen [#csi-esc '2J'];
define: clear-screen-end [#csi-esc '0J'];
define: reverse-colors [#csi-esc '7m'];
define: reset-style [#csi-esc '0m'];

define: save-pos [#csi-esc @s];
define: restore-pos [#csi-esc @u];

define: hide-cursor [#csi-esc '?25l'];
define: show-cursor [#csi-esc '?25h'];

rec: Color()
  r g b Int;

func: new-color(r g b Int) (_ Color)
  let: c Color new;
  $c `r $r put
  $c `g $g put
  $c `b $b put
  $c;
  
func: set-fg(c Color)(_ Stack)
  [#csi-esc '38;2;' $c `r get @; $c `g get @; $c `b get @m];

func: set-bg(c Color)(_ Stack)
  [#csi-esc '48;2;' $c `r get @; $c `g get @; $c `b get @m];

func: move-to(x y Int)(_ Stack) 
  [#csi-esc $y @; $x @H];

func: move-up(n Int)(_ Stack) 
  [#csi-esc $n @A];

func: move-down(n Int)(_ Stack) 
  [#csi-esc $n @B];

func: move-left(n Int)(_ Stack) 
  [#csi-esc $n @D];

func: move-right(n Int)(_ Stack) 
  [#csi-esc $n @C];

func: vline(c Char n Int)(_ Stack)
  [$n {$c 1 move-down {} for 1 move-left {} for} times];

func: hline(c Char n Int)(_ Stack)
  [$n $c times];

);