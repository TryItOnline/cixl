#!/usr/local/bin/cixl

/*
  Executes command with standard streams connected to input and output processes.
  The input process inherits parent input and the output process parent output,
  all errors are forwarded to parent.

  https://github.com/basic-gongfu/cixl#getting-started
*/

use:
  (cx/abc     #nil)
  (cx/cond    = else)
  (cx/func    func:)
  (cx/io      #error #in #out close unblock)
  (cx/io/term say)
  (cx/iter    map next)
  (cx/proc    error exec exit fork in out wait)
  (cx/stack   % ~ len pop splat stack)
  (cx/str     split)
  (cx/sys     #args)
  (cx/var     let:);

func: print-usage()()
  ['Usage:@n'
   'procwrap \'in command\' \'out command\' \'child command\''] say
  -1 exit;

#args len 3 = &print-usage else
let: (in-cmd out-cmd child-cmd) #args splat;

let: child #nil #nil #error fork;
$child {$child-cmd @@s split % next ~ stack exec} else

#in unblock
#out unblock

#in $child in #error fork {
  $in-cmd @@s split % next ~ stack exec
} else

$child out #out #error fork {
  $out-cmd @@s split % next ~ stack exec
} else

$child -1 wait