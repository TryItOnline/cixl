#!/usr/local/bin/cixl

/*
  Scans a range of TCP/IP ports for a host using non-blocking IO and prints status
  to stdout.
  
  Execute ```cixl cixl/examples/tcpscan.cx 127.0.0.1 1 1000 10``` to scan
  ports 1-1000 on localhost and attempt to read 10 bytes from established
  connections.
  
  https://github.com/basic-gongfu/cixl#getting-started
*/

use:
  (cx/abc   Int is-nil)
  (cx/buf   Buf clear len)
  (cx/cond  ? = if else)
  (cx/func  func:)
  (cx/io    Poll close delete on-read read-bytes say wait)
  (cx/iter  for while)
  (cx/net   tcp-connect)
  (cx/math  + -)
  (cx/stack ~ _)
  (cx/str   int)
  (cx/type  new)
  (cx/var   let:);

let: max-read int;
let: (max-port min-port) int ~ int;
let: host;
let: poll Poll new;
let: in Buf new;

['Scanning ports ' $min-port @- $max-port ' on ' $host @@n] say

/*
  Connect to $host:$port and register callback that reads $max-read bytes and
  disconnects.
*/

func: scan(port Int)()
  let: c $host $port tcp-connect;

  $c? {
    $poll $c {
      $c $in $max-read read-bytes
      is-nil {[$port @@s $in] say} else
      $in clear
      $poll $c delete
      $c close      
    } on-read
  } if;

/*
  Scan ports in range and dispatch events.
*/

$max-port $min-port - {
  $min-port + scan
  $poll 0 wait _
} for

/*
  Dispatch remaining events with 100ms timeout.
*/

{$poll 100 wait} while