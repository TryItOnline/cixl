#!/usr/local/bin/cixl

/*
  The seed of a distributed, simplified IRC alternative.

  https://github.com/basic-gongfu/cixl#getting-started
*/

use:
  (cx/abc Stack Str Sym)
  (cx/cond if if-else)
  (cx/func func:)
  (cx/guid Guid)
  (cx/io include: say)
  (cx/rec ? rec: get put)
  (cx/str join)
  (cx/sys home-dir make-dir)
  (cx/stack _)
  (cx/table Table put)
  (cx/type new)
  (cx/var let:);

include: 'qdb.cx';
use: (qdb commit new-db-table upsert);

func: get-path(n Str)(_ Str)
  [home-dir '.ircx' $n] '/' join;

'' get-path make-dir

let: users 'users.db' get-path [`name] new-db-table;
let: channels 'channels.db' get-path [`id] new-db-table;

rec: Channel ()
  id       Guid
  name     Sym
  info     Str
  parent   Channel
  children Table;

func: save(c Channel)()
  let: r Table new;
  $r `id $c `id get put
  $r `name $c `name get put
  $r `info $c `info get put
  
  let: p $c `parent get;
  $p {$r `parent $p `id get put} if
  $channels $r upsert;

func: add-channel(p c Channel)()
  let: pc $p `children get;
  
  $pc {
    $pc $c `id get $c put
  } {
    let: pc Table new;
    $p `children $pc put
    $pc $c `id get $c put    
  } if-else;

rec: User ()
  name Sym
  channel Channel;

func: save(u User)()
  let: r Table new;
  $r `name $u `name get put
  let: c $u `channel get;
  $c {$r `channel $c `id get put} if
  $users $r upsert;

func: new-user (n Sym)(_ User)
  let: u User new;
  $u `name $n put
  $u save
  $u;

func: new-channel(u User n Sym)(_ Channel)
  let: c Channel new;
  let: id Guid new;
  
  $c `id $id put
  $c `name $n put
  $c `info '' put
  
  let: pc $u `channel get;
  
  $pc {
    $c `parent $pc put
    $pc $c add-channel
  } if

  $u `channel $c put
  $c save
  $c;

let: u `me new-user;
$u `foo new-channel _
$u `bar new-channel _
commit
$u `channel get `name get say
