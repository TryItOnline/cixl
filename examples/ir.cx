#!/usr/local/bin/cixl

/*
  The seed of a distributed, simplified IRC alternative.

  https://github.com/basic-gongfu/cixl#getting-started
*/

use:
  (cx/abc Opt Stack Str Sym #nil)
  (cx/cond = else if if-else)
  (cx/error fail)
  (cx/func func:)
  (cx/guid Guid)
  (cx/io include: say)
  (cx/iter for)
  (cx/rec ? rec: get put)
  (cx/str join split)
  (cx/sym sym)
  (cx/sys home-dir make-dir)
  (cx/stack _)
  (cx/table Table put)
  (cx/type new)
  (cx/var let:);

include: 'qdb.cx';
use: (qdb commit new-db-table upsert);

func: get-path(n Str)(_ Str)
  [home-dir '.ircx' $n] @/ join;

'' get-path make-dir

let: users 'users.db' get-path [`name] new-db-table;
let: chans 'chans.db' get-path [`id] new-db-table;
let: root Table new;

rec: Chan ()
  id       Guid
  name     Sym
  info     Str
  parent   Chan
  children Table;

func: save(c Chan)()
  let: r Table new;
  $r `id $c `id get put
  $r `name $c `name get put
  $r `info $c `info get put
  
  let: p $c `parent get;
  $p {$r `parent $p `id get put} if
  $chans $r upsert;

func: add-chan(p Opt c Chan)()
  let: pc $p `children get;

  $pc {
    $pc $c `name get $c put
  } {
    let: pc Table new;
    $p `children $pc put
    $pc $c `name get $c put    
  } if-else;

func: add-chan(#nil c Chan)()
  $root $c `name get $c put;

rec: User ()
  name Sym
  chan Chan;

func: save(u User)()
  let: r Table new;
  $r `name $u `name get put
  let: c $u `chan get;
  $c {$r `chan $c `id get put} if
  $users $r upsert;

func: new-user (n Sym)(_ User)
  let: u User new;
  $u `name $n put
  $u save
  $u;

func: new-chan(u User n Sym)()
  let: c Chan new;
  let: id Guid new;
  
  $c `id $id put
  $c `name $n put
  $c `info '' put
  
  let: pc $u `chan get;
  
  $pc {
    $c `parent $pc put
    $pc $c add-chan
  } {
    #nil $c add-chan
  } if-else

  $c save;

func: join-chan(u User cns Str)()
  $cns 0 get @/ = {$u `chan #nil put} if
  
  $cns @/ split {
    let: n;
    let: uc $u `chan get;

    $n '..' = {
      $uc {'Chan not found: ..' fail} else
      $u `chan $uc `parent get put  
    } {
      $uc {
        let: ccs $uc `children get;
        $ccs {['Chan not found: ' $n] #nil join fail} else
    
        let: c $ccs $n sym get;
        $c {['Chan not found: ' $n] #nil join fail} else

        $u `chan $c put
      } {
        let: c $root $n sym get;
        $c {['Chan not found: ' $n] #nil join fail} else      
        $u `chan $c put
      } if-else
    } if-else
  } for;

let: u `me new-user;
$u `foo new-chan
$u 'foo' join-chan
$u `bar new-chan
$u '/' join-chan
$u 'foo/bar' join-chan
$u '../bar' join-chan
$u '/..' join-chan
commit

$u `chan get `name get say
