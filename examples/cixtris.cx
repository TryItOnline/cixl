/*
  Console Tetris

  The game may be started by executing "load 'cixl/examples/cixtris.cx'" from the
  REPL. Press ESC to exit gracefully and restore terminal.

  https://github.com/basic-gongfu/cixl#getting-started
*/

include: 'ansi.cx';

use:
  (cx/abc #t #f #nil A Char Int Opt)
  (cx/cond ! ? = < > if if-else or switch:)
  (cx/const define:)
  (cx/func func:)
  (cx/io #in #out flush read-char print unblock)
  (cx/io/term
    Color
    #clear-screen #hide-cursor #key-esc #reset-style #restore-pos #reverse-colors
    #save-pos #show-cursor
    move-down move-left move-right move-to new-color normal-mode raw-mode screen-size
    set-bg vline)
  (cx/io/poll Poll new on-read wait)
  (cx/io/term say)
  (cx/iter for map while)
  (cx/math + - * ++ -- mod rand)
  (cx/rec ? rec: get put put-call)
  (cx/ref Ref deref new ref set set-call)
  (cx/stack Stack _ ~ % %% fill get get-rand len put splat stack)
  (cx/str len)
  (cx/var let:);

define: shapes [
  [['**'
    '**']]

  [['****']

   ['*'
    '*'
    '*'
    '*']]

  [['   *'
    '****']

   ['*'
    '*'
    '*'
    '**']

   ['****'
    '*']

   ['**'
    ' *'
    ' *'
    ' *']]

  [['*'
    '****']

   ['**'
    '*'
    '*'
    '*']

   ['****'
    '   *']

   [' *'
    ' *'
    ' *'
    '**']]

  [[' *'
    '***']
    
   ['*'
    '**'
    '*']
    
   ['***'
    ' *']

   [' *'
    '**'
    ' *']]
];

define: colors [
  [255 0 0]
  [0 255 0]
  [0 0 255]
  [255 255 0]
  [0 255 255]
  [255 0 255]
] {splat new-color} map stack;

define: speed-delays [125 100 75 50 25];
define: max-speed #speed-delays len --;

define: key-rotate @i;
define: key-left   @j;
define: key-right  @l;
define: key-fast   @+;
define: key-slow   @-;
define: key-quit   #key-esc;

let: max-x 40;
let: max-y screen-size ~ _;
let: block Ref new;
let: speed 0 ref;
let: key-delay 0 ref;
let: buffer [] % $max-x $max-y * #nil fill;

rec: Block()
  shapes Stack
  i      Int
  color  Color
  x y    Int;

func: new-block()(b Block)
  let: b Block new;
  let: s #shapes get-rand;
  let: c #colors get-rand;
  
  $b `shapes $s          put
  $b `i      $s len rand put
  $b `color  $c          put
  $b `x      $max-x rand put
  $b `y      1           put;

func: get-shape(b Block)(_ Stack)
  $b % `shapes get ~ `i get get;

func: p(_ A)()
  #out ~ print;

func: print-shape(s Stack start Int c Opt)()
  #save-pos p
  $c {$c set-bg p} {#reset-style p} if-else
  let: o $start ref;
  
  $s {
    let: l;
    
    $l {
      @* = {
        @@s p
      } {
        1 move-right p
      } if-else

      $buffer $o deref $c put
      $o &++ set-call
     } for

    1 move-down p
    let: ll $l len;
    $ll move-left p
    $max-x $ll - $o &+ set-call
  } for

  $c {#reset-style p} if
  #restore-pos p;

func: get-offs(x y Int)(_ Int)
  $y $max-x * $x +;
  
func: print-block(b Block)()
  let: s $b get-shape;
  let: o $b % `x get ~ `y get get-offs;
  $s $o $b `color get print-shape;

func: erase-block(b Block)()
  let: s $b get-shape;
  let: o $b % `x get ~ `y get get-offs;  
  $s $o #nil print-shape;

func: rotate-block(b Block)()
  $b `i {++ $b `shapes get len mod} put-call;

func: refresh-speed()()
  #save-pos p
  $max-x 2 + 3 move-to p
  #reset-style p
  #out $speed deref ++ print  
  #restore-pos p;

func: handle-key(#key-rotate)()
   let: b $block deref;
   $b erase-block
   $b rotate-block;  

func: handle-key(#key-left)()
  $block deref `x {
    let: x;
	
    $x 1 > {
      let: nx $x --;
      $b erase-block
      $nx
    } $x if-else
  } put-call;

func: handle-key(#key-right)()
  $block deref `x {
    let: x;
	
    $x $max-x < {
      let: nx $x ++;
      $b erase-block
      $nx
    } $x if-else
  } put-call;

func: handle-key(#key-fast)()
  $speed {
    let: s;
    $s #max-speed < {$s ++} $s if-else
  } set-call

  refresh-speed;

func: handle-key(#key-slow)()
  $speed {
    let: s;
    $s {$s --} $s if-else
  } set-call

  refresh-speed;

func: handle-key(#key-quit)()
  $done #t set;

func: handle-key(_ Char)()
  _;

let: poll Poll new;
let: done #f ref;

#in unblock

$poll #in {
  #in read-char handle-key
  1 $key-delay &+ set-call
} on-read

raw-mode
#clear-screen p
#hide-cursor p
$max-x 1 move-to p
#reverse-colors p
@@s $max-y vline p
#reset-style p
$max-x 2 + 2 move-to p
'Speed:' p
refresh-speed

$block new-block set

{
  let: b $block deref;

  $key-delay deref {
    $key-delay &-- set-call
    $b `x get $b `y get move-to p
    $b print-block
  } {
    $b `y get $max-y = {
      let: bb new-block;
      $block $bb set
      $bb `x get $bb `y get move-to p
      $bb print-block
    } {
      $b `x get $b `y get move-to p
      $b erase-block
      $b `y &++ put-call
      1 move-down p
      $b print-block
    } if-else
    
    #out flush
  } if-else

  let: sd #speed-delays $speed deref get;
  $poll $sd wait _
  $done deref !
} while

#reset-style p
#clear-screen p
1 1 move-to p
#out flush
normal-mode
#show-cursor p
