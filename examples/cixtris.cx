/*
  Console Tetris

  The game may be started by executing "load 'cixl/examples/cixtris.cx'" from the
  REPL. Press ESC to exit gracefully and restore terminal.
  
  https://github.com/basic-gongfu/cixl#getting-started
*/

include: 'ansi.cx';

use:
  (cx/abc #t #f #nil A Bool Char Int Opt is-nil)
  (cx/cond ! ? = == < > <= and else if if-else min max or)
  (cx/const define:)
  (cx/error throw)
  (cx/func func:)
  (cx/io #in #out flush read-char print unblock)
  (cx/io/term
    Color
    #clear-row #clear-screen #hide-cursor #key-esc #reset-style #restore-pos
    #reverse-colors #save-pos #show-cursor
    hline move-down move-left move-right move-to new-color normal-mode raw-mode
    screen-size set-bg vline)
  (cx/io/poll Poll new on-read wait)
  (cx/io/term say)
  (cx/iter find-if for map times while)
  (cx/math + - * ++ -- mod rand)
  (cx/rec ? print rec: get put put-call)
  (cx/ref Ref deref new ref set set-call)
  (cx/stack Stack _ ~ % %% fill get get-rand len put splat stack)
  (cx/str len)
  (cx/var let:);

define: shapes [
  [['**'
    '**']]

  [['****']

   ['*'
    '*'
    '*'
    '*']]

  [['  *'
    '***']

   ['*'
    '*'
    '**']

   ['***'
    '*']

   ['**'
    ' *'
    ' *']]

  [['*'
    '***']

   ['**'
    '*'
    '*']

   ['***'
    '  *']

   [' *'
    ' *'
    '**']]

  [[' *'
    '***']
    
   ['*'
    '**'
    '*']
    
   ['***'
    ' *']

   [' *'
    '**'
    ' *']]

  [[' **'
    '**']

   ['*'
    '**'
    ' *']]

  [['**'
    ' **']

   [' *'
    '**'
    '*']]
];

define: colors [
  [255 255 0]
  [0 255 255]
  [255 128 0]
  [0 0 255]
  [255 0 255]
  [0 255 0]
  [255 0 0]
] {splat new-color} map stack;

define: speed-delays [125 100 75 50 25];
define: max-speed #speed-delays len --;

define: key-rotate @i;
define: key-left   @j;
define: key-right  @l;
define: key-drop   @k;
define: key-fast   @+;
define: key-slow   @-;
define: key-quit   #key-esc;

let: max-x 30;
let: max-y screen-size ~ _;
let: block Ref new;
let: speed 0 ref;
let: key-delay 0 ref;
let: tiles [] % $max-x $max-y * #nil fill;
let: is-done #f ref;
let: is-dropping #f ref;

rec: Block()
  shapes Stack
  i      Int
  color  Color
  x y    Int;

func: shape-width(s Stack)(_ Int)
  0 $s {len max} for;

func: shape-height(s Stack)(_ Int)
  $s len;

func: new-block()(b Block)
  let: b Block new;
  let: si #shapes len rand;
  let: ss #shapes $si get;
  let: i $ss len rand;
  let: s $ss $i get;
  let: c #colors $si get;
  let: x $max-x rand ++ $max-x $s shape-width - min;
  
  $b `shapes $ss put
  $b `i      $i  put
  $b `color  $c  put
  $b `x      $x  put
  $b `y      1   put;

func: get-shape(b Block)(_ Stack)
  $b % `shapes get ~ `i get get;

func: p(_ A)()
  #out ~ print;

func: print-shape(b Block start Int c Opt)()
  let: s $b get-shape;

  #save-pos p
  $c {$c set-bg p} {#reset-style p} if-else
  let: o $start ref;
  
  $s {
    let: l;
    
    $l {
      @* = {
        @@s p
        $tiles $o deref $c $b #nil if-else put
      } {
        1 move-right p
      } if-else

      $o &++ set-call
    } for

    1 move-down p
    let: ll $l len;
    $ll move-left p
    $max-x $ll - $o &+ set-call
  } for
  
  $c {
    $b `x get $max-y move-to p
    $s shape-width {@@s p} times
    #reset-style p
  } if
  
  #restore-pos p;

func: get-offs(x y Int)(_ Int)
  $y -- $max-x * $x -- +;
  
func: print-block(b Block)()
  let: o $b % `x get ~ `y get get-offs;
  $b $o $b `color get print-shape;

func: erase-block(b Block)()
  let: o $b % `x get ~ `y get get-offs;  
  $b $o #nil print-shape;

func: check-shape(b Block s Stack x y Int)(_ Bool)
  let: o $x $y get-offs ref;

  $s {
    let: l;
    let: so $o deref;
    
    $l {
      @* = {
        let: bb $tiles $o deref get;
	$bb {$bb $b == !} and
      } #f if-else

      $o &++ set-call
    } find-if
    
    $o $so $max-x + set
  } find-if !;

func: next-shape(b Block)(_ Stack)
  let: ss $b `shapes get;
  $ss $b `i get ++ $ss len mod get;

func: rotate-block(b Block)()
  $b `i {++ $b `shapes get len mod} put-call;

func: refresh-speed()()
  #save-pos p
  $max-x 2 + 3 move-to p
  #reset-style p
  #out $speed deref ++ print  
  #restore-pos p;

func: handle-key(#key-rotate)()
   let: b $block deref;
   let: ns $b next-shape;
   let: ok $b $ns $b % `x get ~ `y get check-shape;

   $ok {$b `x get $ns shape-width + $max-x <=} and {
     $b % erase-block rotate-block
   } if;
   
func: handle-key(#key-left)()
  let: b $block deref;
  
  $b `x {
    let: x;
	
    $x 1 > {
      let: nx $x --;
      
      $b $b get-shape $nx $b `y get check-shape {
        $b erase-block
        $nx
      } $x if-else
    } $x if-else
  } put-call;

func: handle-key(#key-right)()
  let: b $block deref;
  let: s $b get-shape;
  
  $b `x {
    let: x;
	
    $x $max-x $s shape-width - < {
      let: nx $x ++;
      
      $b $b get-shape $nx $b `y get check-shape {
        $b erase-block
        $nx
      } $x if-else
    } $x if-else
  } put-call;

func: handle-key(#key-drop)()
  $is-dropping #t set;

func: handle-key(#key-fast)()
  $speed {
    let: s;
    $s #max-speed < {$s ++} $s if-else
  } set-call

  refresh-speed;

func: handle-key(#key-slow)()
  $speed {
    let: s;
    $s {$s --} $s if-else
  } set-call

  refresh-speed;

func: handle-key(#key-quit)()
  $is-done #t set;

func: handle-key(_ Char)()
  _;

let: poll Poll new;

#in unblock

$poll #in {
  #in read-char handle-key
  1 $key-delay &+ set-call
} on-read

raw-mode
#clear-screen p
#hide-cursor p
$max-x 1 move-to p
#reverse-colors p
@@s $max-y vline p
#reset-style p
$max-x 2 + 2 move-to p
'Speed:' p
refresh-speed
$block new-block set

{
  let: b $block deref;

  $key-delay deref {
    $key-delay &-- set-call
    $b `x get $b `y get move-to p
    $b print-block
  } {
    let: s $b get-shape;
    let: ok $b $s $b % `x get ~ `y get ++ check-shape;
    $ok ! {$b `y get 1 =} and {$is-done #t set} if
    
    $ok {$b `y get $s shape-height + $max-y <} and {
      $b `x get $b `y get move-to p
      $b erase-block
      $b `y &++ put-call
      1 move-down p
      $b print-block
    } {
      let: bb new-block;
      $block $bb set
      $bb `x get $bb `y get move-to p
      $bb print-block
      $is-dropping #f set
    } if-else
    
    #out flush
  } if-else

  let: sd $is-dropping deref 1 {#speed-delays $speed deref get} if-else;
  $poll $sd wait _
  
  1 $max-y move-to p
  #reverse-colors p
  @@s $max-x hline p
  #reset-style p

  $is-done deref !
} while

#reset-style p
#clear-screen p
1 1 move-to p
#out flush
normal-mode
#show-cursor p
