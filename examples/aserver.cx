#!/usr/local/bin/cixl

/*
  A generic, non-blocking one shot TCP server that either sends from stdin until EOF
  or receives to stdout until disconnected.

  Execute ```cixl examples/aserver.cx 7707 > out``` to start server on port 7707
  and receive data to ```out```.

  https://github.com/basic-gongfu/cixl#getting-started
*/

use:
  (cx/abc     #f #nil #t)
  (cx/cond    ? ! = > and else if if-else or)
  (cx/const   define:)
  (cx/error   throw)
  (cx/func    func:)
  (cx/io      #error #in #out close unblock)
  (cx/io/buf  Buf len new read-bytes write-bytes)
  (cx/io/poll Poll delete len new no-write on-read on-write wait)
  (cx/io/term say yelp)
  (cx/iter    while)
  (cx/net     TCPClient listen accept)
  (cx/ref     deref ref set)
  (cx/stack   pop)
  (cx/str     int)
  (cx/sys     #args)
  (cx/var     let:);

define: backlog 3;
define: max-io  1024;

func: print-usage()()
  ['Usage:@naserver port'] say
  'Invalid argument list' throw;

let: port    #args pop &print-usage or int;
let: poll    Poll new;
let: in      Buf new;
let: out     Buf new;
let: state   `accept ref;
let: s       #nil $port #backlog listen;

func: poll-client-write(c TCPClient)()
  $poll $c {
    $out $c write-bytes {
      $poll $c no-write

      $state deref `drain-client = {
        'Finished sending' yelp
        $state `done set
	$c close
      } if
    } if
  } on-write;

func: poll-out()()
  $poll #out {
    $in #out write-bytes {
      $poll #out no-write
      
      $state deref `drain-out = {
        'Finished writing' yelp
	$state `done set
      }
    } if
  } on-write;

#in unblock
#out unblock

$poll $s {
  let: c $s accept;
  'Connect' yelp

  $poll $c {
    $in $c #max-io read-bytes {
      $in len {poll-out} if
    } {
      'Disconnect' yelp
      $poll $c delete
      $c close
      $state $out {poll-out `drain-out} `done if-else set
    } if-else
  } on-read

  $poll #in {
    $out #in #max-io read-bytes {
      'Finished reading' yelp
      $poll #in delete
      $state `drain-client set
    } else

    $out len {
      $c poll-client-write
    } {
      'Finished sending' yelp
      $poll $c delete
      $c close
      $state `done set
    } if-else
  } on-read

  $poll $s delete
  $s close
} on-read

{
  $poll -1 wait
  $state deref `done =!
} while