* remove abc lib
** move Opt/Cmp/#nil to cond lib
*** update uses
** move Seq to iter lib
*** update uses
** move Num/Int to math lib
*** update uses
** move Num/Int to math lib
*** update uses
* add meta.cx-lib fn to return current lib
** add cx.lib_type
*** add id fn
* rename ref_ref to ref_inc & deref to dec
* change lib init to bool result
** check cx_use returns in inits
** check init result in cx_use
* extract cx_init_libs(cx)
** call from main and tests
** extract new_cx() in tests.c
* replace cx_type.cx with lib

* call push/pop_lib on lambda enter/exit
** add lambda.lib
*** init in cx_lambda_new
* switch consts to cx_set
* add lib: n (exported) ...;  macro
** create new lib if !exists
** add opush/poplib around code on eval
* ---
* add connect(Socket, ip, port) fn
** non-blocking
* add is-connected(Socket) fn
** use getsockopt to check
* add cx_file.fd
** init stream when needed using fdopen
** take mode parameter in file constructor
*** add cx_file_ptr(struct cx_file *)
*** rename var to _ptr
** call close on fd instead of fclose
* ---
* handle argv in emit main
** push strings like load main
* add port scanner example
** take host and port range params
** try connecting n sockets
*** reuse sockets
*** disconnect when connected and process next port
* ---
* extract #const literals as macro in abc lib
* extract stack literals as macro in stack lib
* extract sym literals as macro in sym lib
* extract str literals as macro in str lib
* extract char literals as macro in str lib
* extract $var literals as macro in var lib
* ---
* parse cx fns on first use
** add source field
** add parsed flag
** parse on demand
* optimize const emit
** add op_type.emit_consts
*** rewrite getconst emit
** add cx_getconst_op.value
*** set in parse_const
*** change eval to push value
* add read-iter to io lib
** convert read to iter
*** keep bin ref
** update example and add to post
* add MFile based on cx_buf
** derive RWFile
* add seq zip/unzip fns
* add and/or tests
* add filter tests
* add ^ (pow)
** also add ²/³
** add as separators
** implement for int/rat in math
* add vect put/get fns
* add rat sub/div
** move fns to math lib
* implement Cmp for Sym/Guid
* replace cx_tok.as_ptr with as_id, as_literal etc.
** use cx_sym for CX_TID?
* replace box.as_ptr with as_func/fimp/etc
* add seek(file, pos) fn
* add tell(file) fn
* add len(file) fn
* convert repl to use getline
* change funcs to take cx instead of scope
** grep all cx_scope *
** use cx_scope to get current
* add @@ char escape
* more qdb
** add find-key(Vect) fn
** add is-dirty fn
** add delete fn

sudo rm -rf /usr/local/include/cixl

| Bin new % 'trait: IntStr Int Str; let: (x IntStr) 42; $x say' compile emit
| Bin new % '1 2 +' compile emit
| Bin new % '1000000000 {50 fib _} clock / int<Rat>' compile emit
| Bin new % '#out 42 print<WFile A>' compile emit
| Bin new % '42 say' compile emit
| Bin new % '50 fib' compile emit
| Bin new % '{10000 {50 fib _} times} clock 1000000 / int say' compile emit
| Bin new % 'func: fortytwo(Int)(#f) _; func: fortytwo(42)(#t); 21 fortytwo say' compile emit
