#define htonll(x) ((1==htonl(1)) ? (x) : ((uint64_t)htonl((x) & 0xFFFFFFFF) << 32) | htonl((x) >> 32))
#define ntohll(x) ((1==ntohl(1)) ? (x) : ((uint64_t)ntohl((x) & 0xFFFFFFFF) << 32) | ntohl((x) >> 32))
host64 & net64 fns

* add implicit lambda scope
** one scope per lambda
** set parent
** install on call
** replace scope.parents with plain parent ptr
** copy all values on entry
** pop_scope to copy back
* ---
* enable using Arg refs inside funcs
** add bool cx_is_arg_ref(type) fn
*** search all args recursively for CX_TYPE_ARG
** add OARGDEREF op
*** create with imp
*** resolve type using imp & call args
** walk fimp ops after compile & switch type OPUSH(Type) to OARGDEREF
* add rec type to qdb DBTable
** set recs type from table
** update qdb funcs
** update collabri
*** use init-table
* update pair lib
** add result with switched type to pair rezip imp
** specialize func types
** update tests/examples
* update cxcrypt
* --
* add cx_abort()/cx_exit(int code)/cx_on_exit(void (void *data))
** use in cx_test
** use in exit-fn
** use on_exit instead of atexit
* replace cx_fimp.init with enum cx_fimp_type
** CX_FHOST_C, CX_FHOST_CX, CX_FGUEST
* remove Rec =/?/print overloads
** handle in type methods
*** check if user defined func exists
* move poll/term/buf libs out of io
* add Table emit support
** copy Rec
* replace box.as_ptr with as_func/fimp/etc
* change cx_type to use ref counting
** add nrefs
** replace reinit with deref & new
* replace cx_tok.as_ptr with as_id, as_literal etc.
** use cx_sym for CX_TID?
* convert type id to sym
* convert macro id to sym
* convert func id to sym
* convert repl to use getline
* optimize const emit
** add op_type.emit_consts
*** rewrite getconst emit
** add cx_getconst_op.value
*** set in parse_const
*** change eval to push value
* replace clone fallback to copy with error
* replace varargs with size/array+macro
* --- cxcrypt
* add Pub/PrivKey
* add README
** add LICENSE
* add automatic chunking to encrypt/decrypt
** add #max-chunk
** add int net/host
** read/write size prefixed chunks
** add buf tests
** seek 0 from end before reading into buffer
*** remember prev pos and restore
*** advance pos on write-bytes
