#define htonll(x) ((1==htonl(1)) ? (x) : ((uint64_t)htonl((x) & 0xFFFFFFFF) << 32) | htonl((x) >> 32))
#define ntohll(x) ((1==ntohl(1)) ? (x) : ((uint64_t)ntohl((x) & 0xFFFFFFFF) << 32) | ntohl((x) >> 32))
host64 & net64 fns

* convert iter_type refs in /lib
** convert str/file iters to <char>
* implement type_get method for rec type
* add ref type arg
* add pair type args
* ---
* add implicit lambda scope
** one scope per lambda
** set parent
** install on call
** shuffle all values on stack back and forth
** replace scope.parents with plain parent ptr
* ---
* move type lookup to id tok compilation
** always forward id
** remove lookup flag
* add automatic chunking to encrypt/decrypt
** add #max-chunk
** add int net/host
** read/write size prefixed chunks
** add buf tests
** seek 0 from end before reading into buffer
*** remember prev pos and restore
*** advance pos on write-bytes
* replace cx_fimp.init with enum cx_fimp_type
** CX_FHOST_C, CX_FHOST_CX, CX_FGUEST
* remove Rec =/?/print overloads
** handle in type methods
*** check if user defined func exists
* fix throw recovery
** add separate op eval/emit to run if errrors.count
** replaces new_error magic and catch jump
* add Table emit support
** copy Rec
* replace box.as_ptr with as_func/fimp/etc
* add cxtls project
** use gnutls
** integrate into poll framework
** https://github.com/abligh/tlsproxy
* replace cx_tok.as_ptr with as_id, as_literal etc.
** use cx_sym for CX_TID?
* convert type id to sym
* convert macro id to sym
* convert func id to sym
* convert repl to use getline
* optimize const emit
** add op_type.emit_consts
*** rewrite getconst emit
** add cx_getconst_op.value
*** set in parse_const
*** change eval to push value
* add cx/proc pid(Proc)/this-pid/parent-pid fns
** use getpid()
* replace clone fallback to copy with error
* replace varargs with size/array+macro
* convert size_t to ssize_t and remove unsigned
* --- cxcrypt
* add Pub/PrivKey
* add README
** add LICENSE
