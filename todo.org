* add Ref type
* add Iter type
** add struct cx_iter
*** bool (*next)(struct cx_box *)
** implement for Vect/Str/Int
** implement for Rec
*** push field ids
** extract common for loop
** extract common map fn
*** keep Str override
* add Table type
** extract cx_table from Rec
** allow specifying key
** add $resources table
* implement Cmp for Sym/Guid/Vect/Rec
* use cx_str for CX_TID
** add cx_tok.as_str
** grep CX_TID/as_ptr
* implement type.new for Int/Str/Rat/Time
* add type: macro
** type: Size Int
*** size 42 -> Size(42)
*** inherit and register conversion fns
* add ^ (pow)
** add as separator
** implement for int/rat in math
* add rat sub/div
** move fns to math lib

* add lets: macro
** typecheck and bind stack to vars
* add case: macro
** case: 
(= 1 2) 42
$foo ('foo' $foo vect)
$bar ('bar' $bar vect)
#t 'default'
** execute first clause that tests ok
** error if no match 
* add vect get
** add vect lib
* add str interpolation
* add Stream type
** cx_stream with byte vec & r/w pos
** stream fn to create
** stream '...' write fn
** stream rseek/wseek fn
** stream str fn
** stream len fn
