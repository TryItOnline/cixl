* add next fn to iter lib
* meta lib with read-iter
** move read and convert to iter
*** keep bin ref in iter
* rename unref to deref globally
* change all nrefs to unsigned
* add and/or tests
* extract cond lib with if/?/!
* extract func lib with func:/call/recall/upcall
* add Table type
** extract cx_table from Rec
** allow specifying key
** add $resources table
* add type: macro
** type: Size Int
*** size 42 -> Size(42)
*** inherit and register conversion fns
* add ^ (pow)
** add as separator
** implement for int/rat in math
* add vect get fn
* add rat sub/div
** move fns to math lib

* add lets: macro
** typecheck and bind stack to vars
* implement Cmp for Sym/Guid/Vect/Rec
* use cx_str for CX_TID
** add cx_tok.as_str
** grep CX_TID/as_ptr
* implement type.new for Int/Str/Rat/Time
* add case: macro
** case: 
(= 1 2) 42
$foo ('foo' $foo vect)
$bar ('bar' $bar vect)
#t 'default'
** execute first clause that tests ok
** error if no match 
* add str interpolation
* add Ref type
