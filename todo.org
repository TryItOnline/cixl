* add fg/bg vars
** change f to update vars
* add b + a-z to pick bg color at cursor
** add pick-bg mode
* add 'c' + a-z to use palette slot
* add 'C' to update palette slot with current fg/bg
* add style on buffer update
* ---
* optimize const emit
** add op_type.emit_consts
*** rewrite getconst emit
** add cx_getconst_op.value
*** set in parse_const
*** change eval to push value
* make all lib getters recursive like cx_get_type
* replace box.as_ptr with as_func/fimp/etc
* replace cx_tok.as_ptr with as_id, as_literal etc.
** use cx_sym for CX_TID?
* convert type id to sym
* convert macro id to sym
* convert func id to sym
* convert repl to use getline
* replace clone fallback to copy with error
* replace varargs with size/array+macro
* update embed example in readme
** add lib
** add custom struct type

sudo rm -rf /usr/local/include/cixl
stty -icanon -echo && nc 127.0.0.1 7707

| Bin new % 'trait: IntStr Int Str; let: (x IntStr) 42; $x say' compile emit
| Bin new % '1 2 +' compile emit
| Bin new % '10000000000 {10 {50 fib _} times} clock / int' compile emit
| Bin new % '#out 42 print<WFile A>' compile emit
| Bin new % '42 say' compile emit
| Bin new % '50 fib' compile emit
| Bin new % '{10000 {50 fib _} times} clock 1000000 / int say' compile emit
| Bin new % 'func: fortytwo(Int)(#f) _; func: fortytwo(42)(#t); 21 fortytwo say' compile emit
