* catch errors from handle-in
** send back 'Error: ...\n' + prompt
* load tables on startup
* add :list command
* add :new-topic command
** add admins table
*** Key on User name and Topic id
*** add is-admin fn
**** check topic parent chain
** add operator as admin for all topics
** add user as admin for new topics
** add operator as admin for root topic in db setup
* add support for @-mention
** add user.out Stack
*** init in new-user
*** push mentions on stack
*** move client.buf check into poll-out
*** process user.out before checking
*** process and move to buf in new-client & poll loop 
* add User.password
** add Client.state Sym 
*** `user/password/command
** ask on database setup
** ask on login if !is-nil
* add Topic.log
** name file after topic id
** open in new-topic and log all posts
* ---
* debug row/col
* add support for nil catch
** #nil instead of type
** catch.type is NULL
** process in catch loop without breaking
*** call without error pushed
* change CX_TGROUP to dump everything to outer stack on exit
** update README
* separate Queue read/write polling
** read/write boxes through pipe
** add atomic counter for len
*** stdatomic.h
** rename to Chan and move out of io
* add MFile type
** use struct cx_mfile
*** add nrefs
*** embed file
*** store as box.file
**** use cx_baseof to get mfile
** derive RWFile
* extract cx/math/rat lib
* switch read-bytes to use fread if _ptr
* switch file char iter to use read if !_ptr
** check == 0 instead of feof
* add seq zip/unzip fns
* add and/or tests
* add filter tests
* add ^ (pow)
** also add ²/³
** add as separators
** implement for int/rat in math
* add vect put/get fns
* add rat sub/div
** move fns to math lib
* optimize const emit
** add op_type.emit_consts
*** rewrite getconst emit
** add cx_getconst_op.value
*** set in parse_const
*** change eval to push value
* replace cx_tok.as_ptr with as_id, as_literal etc.
** use cx_sym for CX_TID?
* replace box.as_ptr with as_func/fimp/etc
* add seek(file, pos) fn
* add tell(file) fn
* add len(file) fn
* convert type id to sym
* convert macro id to sym
* convert func id to sym
* convert repl to use getline
* add Buf Seq support
** iterate chars like Str
* implement Buf clone
* add @@ char escape
* more qdb
** add find-key(Vect) fn
** add is-dirty fn
** add delete fn
* replace clone fallback to copy with error

sudo rm -rf /usr/local/include/cixl

| Bin new % 'trait: IntStr Int Str; let: (x IntStr) 42; $x say' compile emit
| Bin new % '1 2 +' compile emit
| Bin new % '10000000000 {10 {50 fib _} times} clock / int' compile emit
| Bin new % '#out 42 print<WFile A>' compile emit
| Bin new % '42 say' compile emit
| Bin new % '50 fib' compile emit
| Bin new % '{10000 {50 fib _} times} clock 1000000 / int say' compile emit
| Bin new % 'func: fortytwo(Int)(#f) _; func: fortytwo(42)(#t); 21 fortytwo say' compile emit


catch: ((Int `int ~.) (A `a ~.)) 42 throw `foo; `bar
