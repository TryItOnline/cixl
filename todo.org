* add ^ (pow)
** add as separator
** implement for int/rat in math
* add rat sub/div
** move fns to math lib
* change str to use nrefs
** add struct cx_str
*** data, len & nrefs
*** get len on demand
* add case: macro
** case: 
(= 1 2) 42
$foo ('foo' $foo vect)
$bar ('bar' $bar vect)
#t 'default'
** execute first clause that tests ok
** error if no match 
* add enum: macro
** add cx_enum
** types/enum.h/c
** embed type
** add manually
** store vect & map
** use box.int_value
** add enum cx_meta_type { CX_ENUM, CX_TRAIT, CX_TYPE, CX_STRUCT }
*** replaces type.trait
*** add param to add_type
*** set A, Opt & Num to CX_TRAIT
** set names as constants
** add int/str fns
** add get fns from int/str
*** enum: FooBar() x y z; 0 foo-bar -> #x, 'y' foo-bar -> #y
** allow redefinition
** disallow rebinding consts as different types
* add vect get
** add vect lib
* add str interpolation
* add Stream type
** cx_stream with byte vec & r/w pos
** stream fn to create
** stream '...' write fn
** stream rseek/wseek fn
** stream str fn
** stream len fn
* add type.cmp
** add Cmp trait
** use to implement < > <= >= for all Cmp types
** use as fallback for eqval
** replaces int/rat imps
** add cx_init_cmp_type
* add Table type
* add struct: macro
** add Struct type 
*** add to parents for all structs
** add cx_type.trait
*** set to true for all user defined traits
** only allow Structs and traits as parents
** use ref counted sets of cx_struct_slot as instances
* add fail func
** like test but just call error with message
* add lets: macro
** typecheck and bind stack to vars

func: fib-rec(a b n Int) $n? if {$b $a $b + $n -- recall} $a;
func: fib(n Int) fib-rec 0 1 $n;
| clock {,10000 times {50 fib _}} / 1000000 int
| clock {(let: v vect; 10000000 for {$v ~ push})} / 1000000 int
