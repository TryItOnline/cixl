* add unlet(Sym) fn
* add is-let (Sym->Bool) fn
* add repeat: macro

repeat: ($c put)
  `resource $r,
  `start    $start,
  `end      $end,
  `total    $q,
  `used     $q;

* add type: macro
** type: Size Int
*** size 42 -> Size(42)
*** inherit and register conversion fns
* add ^ (pow)
** add as separator
** implement for int/rat in math
* add rat sub/div
** move fns to math lib
* change str to use nrefs
** add struct cx_str
*** data, len & nrefs
*** get len on demand
* add lazy iters
** type.iter fn
** extract map that takes/returns iter
** extract for to drive iter
* add some/none fns
*** Iter->Call->Iter
* add lets: macro
** typecheck and bind stack to vars
* add case: macro
** case: 
(= 1 2) 42
$foo ('foo' $foo vect)
$bar ('bar' $bar vect)
#t 'default'
** execute first clause that tests ok
** error if no match 
* add vect get
** add vect lib
* add str interpolation
* add Stream type
** cx_stream with byte vec & r/w pos
** stream fn to create
** stream '...' write fn
** stream rseek/wseek fn
** stream str fn
** stream len fn
* add type.cmp
** add Cmp trait
** use to implement < > <= >= for all Cmp types
** use as fallback for eqval
** replaces int/rat imps
** add cx_init_cmp_type
* add Table type
* add fail func
** like test but just call error with message

func: fib-rec(a b n Int) $n? if {$b $a $b + $n -- recall} $a;
func: fib(n Int) fib-rec 0 1 $n;
| clock {,10000 times {50 fib _}} / 1000000 int
| clock {(let: v vect; 10000000 for {$v ~ push})} / 1000000 int

   $foo, put `x 42 put `y 'foo' 
...
[Foo(x 42 y 'foo')]

   get `x
...
[42]

   | $foo [`x `y] get
...
[42 'foo']

rec: Node(A) left right Node value A;
