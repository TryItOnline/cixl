* return imps in reverse order
* add support for trait redefinition
** loop all types and remove from parents/tags
* add vect get
* add rat sub/div
* add str interpolation
* add Stream type
** cx_stream with byte vec & r/w pos
** stream fn to create
** stream '...' write fn
** stream rseek/wseek fn
** stream str fn
** stream len fn
* add type.cmp
** add Cmp trait
** use to implement < > <= >= for all Cmp types
** use as fallback for eqval
** replaces int/rat imps
** add cx_init_cmp_type
* add Table type
* add struct: macro
** add Struct type 
*** add to parents for all structs
** add cx_type.trait
*** set to true for all user defined traits
** only allow Structs and traits as parents
** use ref counted sets of cx_struct_slot as instances
* add fail func
** like test but just call error with message
* add lets: macro
** typecheck and bind stack to vars

func: fib-rec(a b n Int) $n? if {$b $a $b + $n -- recall} $a;
func: fib(n Int) fib-rec 0 1 $n;
| clock {,10000 times {50 fib _}} / 1000000 int
| clock {(let: v vect; 10000000 for {$v ~ push})} / 1000000 int
