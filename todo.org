* debug row/col
* ---
* add collabri user logs
* add user mode
* enter by typing :user a
** empty name gets current
* add user cmd tail
* ---
* add support for nil catch
** #nil instead of type
** catch.type is NULL
** process in catch loop without breaking
*** call without error pushed
** call in scope deref before deinit
* change lib getters like cx_get_type
* change CX_TGROUP to dump everything to outer stack on exit
** update README
* finish stack type emit
* extract cx/math/rat lib
* switch read-bytes to use fread if _ptr
* switch file char iter to use read if !_ptr
** check == 0 instead of feof
* add seq zip/unzip fns
* add and/or tests
* add filter tests
* optimize const emit
** add op_type.emit_consts
*** rewrite getconst emit
** add cx_getconst_op.value
*** set in parse_const
*** change eval to push value
* replace cx_tok.as_ptr with as_id, as_literal etc.
** use cx_sym for CX_TID?
* replace box.as_ptr with as_func/fimp/etc
* convert type id to sym
* convert macro id to sym
* convert func id to sym
* convert repl to use getline
* add Buf Seq support
** iterate chars like Str
* implement Buf clone
* replace clone fallback to copy with error
* replace varargs with size/array+macro
* update embed example in readme
** add lib
** add custom struct type

sudo rm -rf /usr/local/include/cixl

| Bin new % 'trait: IntStr Int Str; let: (x IntStr) 42; $x say' compile emit
| Bin new % '1 2 +' compile emit
| Bin new % '10000000000 {10 {50 fib _} times} clock / int' compile emit
| Bin new % '#out 42 print<WFile A>' compile emit
| Bin new % '42 say' compile emit
| Bin new % '50 fib' compile emit
| Bin new % '{10000 {50 fib _} times} clock 1000000 / int say' compile emit
| Bin new % 'func: fortytwo(Int)(#f) _; func: fortytwo(42)(#t); 21 fortytwo say' compile emit
